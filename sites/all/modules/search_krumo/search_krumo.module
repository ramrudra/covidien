<?php

/**
 * Implements hook_preprocess_page
 * We use this to test search krumo
 *//*
function search_krumo_preprocess_page(&$variables) {
  sdpm($variables);

  sdpm(array(
    'test'
  ));
}
//*/

/**
 * Print a variable to the 'message' area of the page. Uses devel's dpm()
 */
function sdpm($input, $name = NULL) {
  $label = search_krumo_inspect($input);
  drupal_add_js(array('searchKrumo' => array('var' => array($label))), 'setting');

  // Route it to the devel module
  dpm($input, $name);
}

/**
 * Implements hook_theme().
 */
function search_krumo_theme($existing, $type, $theme, $path) {
  return array(
    'status_messages' => array(
      'variables' => array('display' => NULL),
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function search_krumo_theme_registry_alter(&$theme_registry) {
  $theme_registry['status_messages']['theme path'] = drupal_get_path('module', 'search_krumo');
  $theme_registry['status_messages']['function'] = 'search_krumo_status_messages';
}

/**
 * Replacement theme_status_messages() for core.
 *
 * We need this to ad the js every time that we display a krumo
 * When you do a dpm inside the theme layer it gets printed
 * out a page request later.
 */
function search_krumo_status_messages($variables) {
  $display = $variables['display'];
  $output = '';

  $status_heading = array(
    'status' => t('Status message'),
    'error' => t('Error message'),
    'warning' => t('Warning message'),
  );
  foreach (drupal_get_messages($display) as $type => $messages) {
    $output .= "<div class=\"messages $type\">\n";
    if (!empty($status_heading[$type])) {
      $output .= '<h2 class="element-invisible">' . $status_heading[$type] . "</h2>\n";
    }

    // Add the search krumo js if one message is a dpm or sdpm
    foreach ($messages as $message) {
      if (substr($message, 0, 16) == '<!-- Using Krumo' || substr($message, 0, 16) == '<div class="krum') {
        drupal_add_js(drupal_get_path('module', 'search_krumo') . '/search_krumo.search.js');
        drupal_add_js(drupal_get_path('module', 'search_krumo') . '/search_krumo.trail.js');
      }
    }

    if (count($messages) > 1) {
      $output .= " <ul>\n";
      foreach ($messages as $message) {
        if ($message)
        $output .= '  <li>' . $message . "</li>\n";
      }
      $output .= " </ul>\n";
    }
    else {
      $output .= $messages[0];
    }
    $output .= "</div>\n";
  }
  return $output;
}

/**
 * Return a variable's label
 */
function search_krumo_inspect($var) {
  $backtrace = debug_backtrace();
  if (is_readable($backtrace[1]["file"])) {
  $src = file($backtrace[1]["file"]);
  $line = $src[ $backtrace[1]['line'] - 1 ];

  // let's match the function call and the last closing bracket
  preg_match( "#sdpm\((.+)\)#", $line, $match );

  /* let's count brackets to see how many of them actually belongs
     to the var name
     Eg:   die(inspect($this->getUser()->hasCredential("delete")));
        We want:   $this->getUser()->hasCredential("delete")
  */
  if (isset($match[1])) {
    $max = strlen($match[1]);
    $varname = "";
    $c = 0;
    for ($i = 0; $i < $max; $i++) {
      if ($match[1]{$i} == "(" ) $c++;
      elseif ($match[1]{$i} == ")") $c--;
      if ($c < 0) break;
      $varname .=  $match[1]{$i};
    }
      $label = $varname;
    }
    else {
      $label = '$var';
    }

    // Get the first argument of sdpm
    $real_label = explode(', ', $label);

    // Return the variable name
    return $real_label[0];
  }
  else {
    return '$var';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter devel_execute_form on 'devel/php' page.
 */
function search_krumo_form_devel_execute_form_alter(&$form, $form_state) {
  $form['#attached']['js'][] = drupal_get_path('module', 'search_krumo') . '/search_krumo.js';
  $form['#attached']['js'][] = array('type' => 'setting', 'data' => array('searchKrumo' => array('var' => array('$var'))));
}
